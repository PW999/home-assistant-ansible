---
# Docker will be installed using it's own role
- name: Install latest hass requirements   # noqa package-latest
  apt:
    name: [
      network-manager,
      apparmor,
      apparmor-utils,
      jq,
      curl,
      dbus,
      udisks2,
      libglib2.0-bin,
      procps
    ]
    install_recommends: false
    state: latest

- name: Make sure NetworkManager is running and enabled
  service:
    name: NetworkManager
    state: started
    enabled: true

- name: Disable modem manager in preference of serial devices
  ansible.builtin.systemd:
    state: stopped
    name: ModemManager
    enabled: false
  ignore_errors: true   # in case modem manager does not exist
  tags: notest

- name: Check if os agent was already downloaded
  stat:
    path: "{{ install_dir }}/setup/os-agent.deb"
  register: os_agent_installer

- name: Download OS Agent package
  get_url:
    url: "{{ hass_os_agent_url }}"
    dest: "{{ install_dir }}/setup/os-agent.deb"
    mode: 0740
    force: false
  when: not os_agent_installer.stat.exists

- name: Check if OS Agent is installed
  command: dpkg-query -W os-agent
  register: os_agent_package_check
  failed_when: os_agent_package_check.rc > 1
  changed_when: os_agent_package_check.rc == 1

- name: Install OS Agent
  apt: deb="{{ install_dir }}/setup/os-agent.deb"
  when: os_agent_package_check.rc == 1

- name: Print machine type
  debug:
    var: machine_type

- name: Create the hass data directory
  file:
    path: "{{ install_dir }}/homeassistant"
    owner: root
    group: root
    mode: '0750'
    state: directory

- name: Create the apparmor directory
  ansible.builtin.file:
    path: "{{ install_dir }}/homeassistant/apparmor"
    owner: root
    group: root
    mode: '0750'
    state: directory

- name: Check if supervisor package was already downloaded
  stat:
    path: "{{ install_dir }}/setup/homeassistant-supervised.deb"
  register: supervisor_installer

- name: Download Home Assistant supervised package
  get_url:
    url: "{{ hass_supervised_url }}"
    dest: "{{ install_dir }}/setup/homeassistant-supervised.deb"
    mode: 0740
    force: false
  when: not supervisor_installer.stat.exists

- name: Check if Home Assistant is installed
  command: dpkg-query -W homeassistant-supervised
  register: home_assistant_package_check
  failed_when: home_assistant_package_check.rc > 1
  changed_when: home_assistant_package_check.rc == 1

- name: Set Home Assistant machine type
  ansible.builtin.debconf:
    name: homeassistant-supervised
    question: ha/machine-type
    value: "{{ machine_type }}"
    vtype: select

- name: Install Home Assistant Supervised
  apt: deb="{{ install_dir }}/setup/homeassistant-supervised.deb"
  environment:
    DATA_SHARE: "{{ install_dir }}/homeassistant"
  register: homeassistant_install
  when: home_assistant_package_check.rc == 1

- name: "[Workaround] Wait for containers to spin up"  # give the supervisor time to launch all containers
  wait_for:
    timeout: 15
  when: >-
    homeassistant_install.changed
    and ansible_distribution == 'Debian'
    and ansible_distribution_major_version == '11'

- name: "[Workaround] Stop Home Assistant"
  command: ha core stop
  retries: 10
  register: ha_restart_workaround
  until: ha_restart_workaround.rc == 0
  delay: 10
  ignore_errors: true
  when: >-
    homeassistant_install.changed
    and ansible_distribution == 'Debian'
    and ansible_distribution_major_version == '11'

- name: "[Workaround] Remove home assistant container"
  community.docker.docker_container:
    name: homeassistant
    state: absent
  when: >-
    homeassistant_install.changed
    and ansible_distribution == 'Debian'
    and ansible_distribution_major_version == '11'

- name: "[Workaround] Restart Home Assistant container"
  command: ha core start
  when: >-
    homeassistant_install.changed
    and ansible_distribution == 'Debian'
    and ansible_distribution_major_version == '11'
